#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* prev;
    Node* next;

    Node(int data) {
        this->data = data;
        next = nullptr;
        prev = nullptr;
    }
};

class Linkedlist {
public:
    Node* head;
    Node* tail;
    int size;

    Linkedlist() {
        head = nullptr;
        tail = nullptr;
        size = 0;
    }

    bool is_empty() {
        return size == 0;
    }
    bool Search(int value) {
        Node* ptr = head;
        while (ptr != nullptr) {
            if (ptr->data == value) {
                return true;
            }
            ptr = ptr->next;
        }
        return false;
    }

    void Insearfirst(int value) {
        Node* newnode = new Node(value);
        if (is_empty()) {
            head = newnode;
            tail = newnode;
        }
        else {
            newnode->next = head;
            head->prev = newnode;
            head = newnode;
        }
        size++;
    }

    void Insertlast(int value) {
        Node* newnode = new Node(value);
        if (is_empty()) {
            head = newnode;
            tail = newnode;
        }
        else {
            tail->next = newnode;
            newnode->prev = tail;
            tail = newnode;
        }
        size++;
    }



    void Insert(int value, int position) {
        if (position < 0) {
            cout << "invalid position\n";
        }
        else if (position == 0) {
            Insearfirst(value);
        }
        else if (position > size) {
            cout << "invalid position\n";
        }
        else {
            Node* ptr = head;
            int count = 0;
            while (count < position - 1) {
                ptr = ptr->next;
                count++;
            }
            Node* newnode = new Node(value);
            newnode->next = ptr->next;
            newnode->prev = ptr;
            ptr->next = newnode;
            newnode->next->prev = newnode;
            size++;
        }
    }

    void Deletebegin() {
        if (is_empty()) {
            cout << "no items to delete\n";
        }
        else {
            Node* temp = head;
            head = head->next;
            delete[] temp;
            head->prev = nullptr;
            size--;
        }
    }
    void DeleteEnd() {
        if (is_empty()) {
            cout << "no items to delete\n";
        }
        else {
            Node* temp = tail;
            tail = tail->prev;
            delete[] temp;
            tail->next = nullptr;
        }
    }


    void Deleteitem(int value) {
        if (is_empty()) {
            cout << "no items to delete\n";
            return;
        }
        else {
            if (Search(value)) {
                Node* ptr = head;
                while (ptr->next->data != value) {
                    ptr = ptr->next;
                }
                Node* temp = ptr->next;
                ptr->next = temp->next;
                temp->next->prev = ptr;
                delete[] temp;
            }
            else {
                cout << "item not found\n";
            }
        }
    }

    void display() {
        Node* ptr = head;
        while (ptr != nullptr) {
            cout << ptr->data << " ";
            ptr = ptr->next;
        }
        cout << "\n";
    }
};

int main() {
    Linkedlist list;
    list.Insearfirst(40);
    list.display();
    list.Insertlast(20);
    list.display();
    list.Insert(50, 1);
    list.display();
    list.Deleteitem(50);
    list.display();
}
